<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/data/mongo 
	    http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd  
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		"
	default-lazy-init="false">

	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.xionger.qcb">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	
	<!-- ################### 加载应用程序资源文件 ############################### -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:application.properties</value>
			</list>
		</property>
	</bean>

	
	<!-- ################### alibaba.druid数据库连接池 ############################### -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
		<property name="minIdle" value="10" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="100" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="18000" />
		<property name="logAbandoned" value="true" />
	</bean>

	<!-- ################### mybatis文件配置，扫描所有mapper文件 ############################### -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:configLocation="classpath:mybatis-config.xml" />

	<!-- ################### mybatis自动扫描mapper接口 ############################### -->
	<bean name="scanMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xionger.qcb.dao.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 数据源事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事务管理 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="process*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
			<tx:method name="select*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<!-- 对其他方法 使用默认的事务管理 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 事务 aop 配置,主要切面拦截注解 -->
	<aop:config>
		<aop:pointcut id="serviceMethods" expression="execution(* com.xionger.qcb.service..*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
	</aop:config>

	<!-- 配置使Spring采用CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
    <!-- 启用对事务注解的支持 -->  
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />

	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"> </bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.xionger.qcb.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config> 
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<!-- spring security -->
	<bean name="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!--验证码 -->
<!-- 	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha"> -->
<!-- 		<property name="config"> -->
<!-- 			<bean class="com.google.code.kaptcha.util.Config"> -->
<!-- 				<constructor-arg type="java.util.Properties"> -->
<!-- 					<props> -->
<!-- 						<prop key="kaptcha.border.color">19,101,151</prop> -->
<!-- 						<prop key="kaptcha.textproducer.font.color">19,101,151</prop> -->
<!-- 						<prop key="kaptcha.noise.color">19,101,151</prop> -->
<!-- 						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop> -->

<!-- 						<prop key="kaptcha.image.width">124</prop> -->
<!-- 						<prop key="kaptcha.image.height">45</prop> -->
<!-- 						<prop key="kaptcha.textproducer.char.string">23456789ABCDEFGHJKLMNPQRSTUVWXYZ</prop> -->
<!-- 						<prop key="kaptcha.textproducer.char.length">4</prop> -->
<!-- 						<prop key="kaptcha.border">yes</prop> -->
<!-- 						<prop key="kaptcha.textproducer.font.names">宋体,微软雅黑</prop> -->
<!-- 						<prop key="kaptcha.background.clear.from">255,255,255</prop> -->
<!-- 						<prop key="kaptcha.background.clear.to">255,255,255</prop> -->
<!-- 					</props> -->
<!-- 				</constructor-arg> -->
<!-- 			</bean> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	


	<!-- jedis 连接池配置 -->
<!-- 	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> -->
<!-- 		<property name="minIdle" value="${redis.pool.minIdle}" /> -->
<!-- 		<property name="maxIdle" value="${redis.pool.maxIdle}" /> -->
<!-- 		<property name="maxTotal" value="${redis.pool.maxActive}" /> -->
<!-- 		<property name="maxWaitMillis" value="${redis.pool.maxWait}" /> -->
<!-- 		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" /> -->
<!-- 		<property name="testOnReturn" value="${redis.pool.testOnReturn}" /> -->
<!-- 	</bean> -->

<!-- 	<bean id="jedisConnFactory" -->
<!-- 		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> -->
<!-- 		<property name="hostName" value="${redis.ip}" /> -->
<!-- 		<property name="port" value="${redis.port}" /> -->
<!-- 		<property name="password" value="${redis.pass}" /> -->
<!-- 		<property name="database" value="${redis.db}" /> -->
<!-- 		<property name="usePool" value="true" /> -->
<!-- 		<property name="poolConfig" ref="jedisPoolConfig" /> -->
<!-- 	</bean> -->

	<!-- redis template definition -->
<!-- 	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> -->
<!-- 		<property name="connectionFactory" ref="jedisConnFactory" /> -->
<!-- 		<property name="keySerializer"> -->
<!-- 			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 		<property name="valueSerializer"> -->
<!-- 			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 		<property name="hashKeySerializer"> -->
<!-- 			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 		<property name="hashValueSerializer"> -->
<!-- 			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<!-- 将session放入redis -->
<!-- 	<bean id="redisHttpSessionConfiguration" -->
<!-- 		class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"> -->
<!-- 		<property name="maxInactiveIntervalInSeconds" value="1200" /> -->
<!-- 	</bean> -->

	
</beans>
